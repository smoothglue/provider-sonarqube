// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PermissionsInitParameters struct {

	// (String) The name of the Group that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with login_name
	// The name of the Group that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with `login_name`
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// (String) The name of the user that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with group_name.
	// The name of the user that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with `group_name`.
	LoginName *string `json:"loginName,omitempty" tf:"login_name,omitempty"`

	// (List of String) A list of permissions that should be applied. Changing this forces a new resource to be created. Possible values are: admin, codeviewer, issueadmin, securityhotspotadmin, scan, user.
	// A list of permissions that should be applied. Changing this forces a new resource to be created. Possible values are: `admin`, `codeviewer`, `issueadmin`, `securityhotspotadmin`, `scan`, `user`.
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (String) Specify if you want to apply project level permissions. Changing this forces a new resource to be created. Cannot be used with template_id & template_name
	// Specify if you want to apply project level permissions. Changing this forces a new resource to be created. Cannot be used with `template_id & template_name`
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with project_key & template_name
	// Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with `project_key & template_name`
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	// (String) Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with project_key & template_id
	// Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with `project_key & template_id`
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

type PermissionsObservation struct {

	// (String) The name of the Group that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with login_name
	// The name of the Group that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with `login_name`
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the user that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with group_name.
	// The name of the user that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with `group_name`.
	LoginName *string `json:"loginName,omitempty" tf:"login_name,omitempty"`

	// (List of String) A list of permissions that should be applied. Changing this forces a new resource to be created. Possible values are: admin, codeviewer, issueadmin, securityhotspotadmin, scan, user.
	// A list of permissions that should be applied. Changing this forces a new resource to be created. Possible values are: `admin`, `codeviewer`, `issueadmin`, `securityhotspotadmin`, `scan`, `user`.
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (String) Specify if you want to apply project level permissions. Changing this forces a new resource to be created. Cannot be used with template_id & template_name
	// Specify if you want to apply project level permissions. Changing this forces a new resource to be created. Cannot be used with `template_id & template_name`
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with project_key & template_name
	// Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with `project_key & template_name`
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	// (String) Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with project_key & template_id
	// Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with `project_key & template_id`
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

type PermissionsParameters struct {

	// (String) The name of the Group that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with login_name
	// The name of the Group that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with `login_name`
	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// (String) The name of the user that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with group_name.
	// The name of the user that should get the specified permissions. Changing this forces a new resource to be created. Cannot be used with `group_name`.
	// +kubebuilder:validation:Optional
	LoginName *string `json:"loginName,omitempty" tf:"login_name,omitempty"`

	// (List of String) A list of permissions that should be applied. Changing this forces a new resource to be created. Possible values are: admin, codeviewer, issueadmin, securityhotspotadmin, scan, user.
	// A list of permissions that should be applied. Changing this forces a new resource to be created. Possible values are: `admin`, `codeviewer`, `issueadmin`, `securityhotspotadmin`, `scan`, `user`.
	// +kubebuilder:validation:Optional
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (String) Specify if you want to apply project level permissions. Changing this forces a new resource to be created. Cannot be used with template_id & template_name
	// Specify if you want to apply project level permissions. Changing this forces a new resource to be created. Cannot be used with `template_id & template_name`
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with project_key & template_name
	// Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with `project_key & template_name`
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	// (String) Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with project_key & template_id
	// Specify if you want to apply the permissions to a permission template. Changing this forces a new resource to be created. Cannot be used with `project_key & template_id`
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

// PermissionsSpec defines the desired state of Permissions
type PermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PermissionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PermissionsInitParameters `json:"initProvider,omitempty"`
}

// PermissionsStatus defines the observed state of Permissions.
type PermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Permissions is the Schema for the Permissionss API. Provides a Sonarqube Permissions resource. This can be used to manage global and project permissions.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,sonarqube}
type Permissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || (has(self.initProvider) && has(self.initProvider.permissions))",message="spec.forProvider.permissions is a required parameter"
	Spec   PermissionsSpec   `json:"spec"`
	Status PermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PermissionsList contains a list of Permissionss
type PermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Permissions `json:"items"`
}

// Repository type metadata.
var (
	Permissions_Kind             = "Permissions"
	Permissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Permissions_Kind}.String()
	Permissions_KindAPIVersion   = Permissions_Kind + "." + CRDGroupVersion.String()
	Permissions_GroupVersionKind = CRDGroupVersion.WithKind(Permissions_Kind)
)

func init() {
	SchemeBuilder.Register(&Permissions{}, &PermissionsList{})
}
