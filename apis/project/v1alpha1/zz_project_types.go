// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectInitParameters struct {

	// (String) The name of the Project to create
	// The name of the Project to create
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Key of the project. Maximum length 400. All letters, digits, dash, underscore, period or colon.
	// Key of the project. Maximum length 400. All letters, digits, dash, underscore, period or colon.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// (Block List) A list of settings associated to the project (see below for nested schema)
	// A list of settings associated to the project
	Setting []SettingInitParameters `json:"setting,omitempty" tf:"setting,omitempty"`

	// (List of String) A list of tags to put on the project.
	// A list of tags to put on the project.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Whether the created project should be visible to everyone, or only specific user/groups. If no visibility is specified, the default project visibility of the organization will be used. Valid values are public and private.
	// Whether the created project should be visible to everyone, or only specific user/groups. If no visibility is specified, the default project visibility of the organization will be used. Valid values are `public` and `private`.
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

type ProjectObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the Project to create
	// The name of the Project to create
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Key of the project. Maximum length 400. All letters, digits, dash, underscore, period or colon.
	// Key of the project. Maximum length 400. All letters, digits, dash, underscore, period or colon.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// (Block List) A list of settings associated to the project (see below for nested schema)
	// A list of settings associated to the project
	Setting []SettingObservation `json:"setting,omitempty" tf:"setting,omitempty"`

	// (List of String) A list of tags to put on the project.
	// A list of tags to put on the project.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Whether the created project should be visible to everyone, or only specific user/groups. If no visibility is specified, the default project visibility of the organization will be used. Valid values are public and private.
	// Whether the created project should be visible to everyone, or only specific user/groups. If no visibility is specified, the default project visibility of the organization will be used. Valid values are `public` and `private`.
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

type ProjectParameters struct {

	// (String) The name of the Project to create
	// The name of the Project to create
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Key of the project. Maximum length 400. All letters, digits, dash, underscore, period or colon.
	// Key of the project. Maximum length 400. All letters, digits, dash, underscore, period or colon.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// (Block List) A list of settings associated to the project (see below for nested schema)
	// A list of settings associated to the project
	// +kubebuilder:validation:Optional
	Setting []SettingParameters `json:"setting,omitempty" tf:"setting,omitempty"`

	// (List of String) A list of tags to put on the project.
	// A list of tags to put on the project.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Whether the created project should be visible to everyone, or only specific user/groups. If no visibility is specified, the default project visibility of the organization will be used. Valid values are public and private.
	// Whether the created project should be visible to everyone, or only specific user/groups. If no visibility is specified, the default project visibility of the organization will be used. Valid values are `public` and `private`.
	// +kubebuilder:validation:Optional
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`
}

type SettingInitParameters struct {

	// (List of Map of String) Setting field values for the supplied key
	// Setting field values for the supplied key
	FieldValues []map[string]*string `json:"fieldValues,omitempty" tf:"field_values,omitempty"`

	// (String) Setting key
	// Setting key
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Setting a value for the supplied key
	// Setting a value for the supplied key
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (List of String) Setting multi values for the supplied key
	// Setting multi values for the supplied key
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SettingObservation struct {

	// (List of Map of String) Setting field values for the supplied key
	// Setting field values for the supplied key
	FieldValues []map[string]*string `json:"fieldValues,omitempty" tf:"field_values,omitempty"`

	// (String) Setting key
	// Setting key
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Setting a value for the supplied key
	// Setting a value for the supplied key
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (List of String) Setting multi values for the supplied key
	// Setting multi values for the supplied key
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SettingParameters struct {

	// (List of Map of String) Setting field values for the supplied key
	// Setting field values for the supplied key
	// +kubebuilder:validation:Optional
	FieldValues []map[string]*string `json:"fieldValues,omitempty" tf:"field_values,omitempty"`

	// (String) Setting key
	// Setting key
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) Setting a value for the supplied key
	// Setting a value for the supplied key
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (List of String) Setting multi values for the supplied key
	// Setting multi values for the supplied key
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

// ProjectSpec defines the desired state of Project
type ProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectInitParameters `json:"initProvider,omitempty"`
}

// ProjectStatus defines the observed state of Project.
type ProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Project is the Schema for the Projects API. Provides a Sonarqube Project resource. This can be used to create and manage Sonarqube Project.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,sonarqube}
type Project struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.project) || (has(self.initProvider) && has(self.initProvider.project))",message="spec.forProvider.project is a required parameter"
	Spec   ProjectSpec   `json:"spec"`
	Status ProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectList contains a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Project `json:"items"`
}

// Repository type metadata.
var (
	Project_Kind             = "Project"
	Project_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Project_Kind}.String()
	Project_KindAPIVersion   = Project_Kind + "." + CRDGroupVersion.String()
	Project_GroupVersionKind = CRDGroupVersion.WithKind(Project_Kind)
)

func init() {
	SchemeBuilder.Register(&Project{}, &ProjectList{})
}
